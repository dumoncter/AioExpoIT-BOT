import asyncio
from datetime import datetime
from aiogram import types, Dispatcher, filters
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from keyboards import zkt_main, zkt_event_vf, zkt_event_vf_id_close, main_kb
from .zkt_sql_inject import sql_inject
import json


# FSM States
class ClientState(StatesGroup):
    INJECT_MAIN = State()


async def main_zkt(message: types.Message) -> None:
    await message.reply("–í—ã–±–µ—Ä–µ—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é", reply_markup=zkt_main)


async def event_verification(message: types.Message) -> None:
    await message.reply("<b>–î–ª—è —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∑–Ω–∞—Ç—å —Ç—Ä–µ–±—É–µ–º—ã–π ID —Å–∫–∞–Ω–µ—Ä–∞.</b>\n"
                        "–ù–∞–π–¥–∏—Ç–µ —Ç—Ä–µ–±—É–µ–º—ã–π –∏–∑ —Å–ø–∏—Å–∫–∞.\n"
                        "<u>–ï—Å–ª–∏ ID —É–∂–µ –∏–∑–≤–µ—Å—Ç–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ <b>–¥–∞–ª–µ–µ - '–û—Ç–º–µ—Ç–∏—Ç—å'</b></u>",
                        reply_markup=zkt_event_vf)


async def search_zkt_id(message: types.Message) -> None:
    await message.answer(open_file())
    await message.answer("‚ùó <u><b>–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É</b></u>", reply_markup=zkt_event_vf_id_close)


def open_file():
    with open("zkt_ip.json", 'r', encoding='utf-8') as f:
        contents = json.load(f)
        new_line = '\n'
        id_list = []
        for i in range(len(contents)):
            id_list.append('ID: ' + '<b>' + str(contents[i]['ID']) + '</b>' + ' = ' + contents[i]['Name'])
        return new_line.join(list(map(str, id_list)))


async def notice(message: types.Message, state: FSMContext):
    await message.reply("‚úÖ –£–∫–∞–∂–∏—Ç–µ, —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª: \n"
                        "<b>1 - ID —Å–∫–∞–Ω–µ—Ä–∞</b> –∏ 2 - <b>ID —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏</b> –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞. \n"
                        "–ü—Ä–∏–º–µ—Ä: "
                        "<b>930 57</b>", reply_markup=zkt_event_vf_id_close)
    await state.set_state(ClientState.INJECT_MAIN)


async def func_inject(message: types.Message, state: FSMContext):
    user_msg = message.text
    formated = user_msg.split()
    await state.update_data(INJECT_MAIN=user_msg)
    if user_msg.isalpha():
        await message.reply('‚õî –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã .\n')
    elif len(formated) >= 3:
        await message.reply('‚õî –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±–æ–ª–µ–µ –¥–≤—É—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ .\n'
                            '–ü—Ä–∏–º–µ—Ä: ID —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏: <b>1450</b>, ID —Å–∫–∞–Ω–µ—Ä–∞: <b>48</b>\n'
                            '<b><u>1450 48</u></b>')
    elif len(message.text) > 8:
        await message.reply('‚õî –ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥.\n'
                            'ID —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å <b>–±–æ–ª–µ–µ 9999</b> –Ω–æ–º–µ—Ä–æ–≤\n'
                            'ID —Å–∫–∞–Ω–µ—Ä–∞ –Ω–µ –±–æ–ª–µ–µ <b>999</b>\n'
                            '–ü—Ä–∏–º–µ—Ä: ID —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏: <b>1450</b>, ID —Å–∫–∞–Ω–µ—Ä–∞: <b>48</b>\n'
                            '<b><u>1450 48</u></b>')
    elif not user_msg:
        await message.reply('–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º')
    else:
        newline = '\n'
        inject = asyncio.create_task(sql_inject(formated[0], formated[1]))
        await inject
        await message.answer(f'‚úÖ <b>{datetime.now().strftime("%m/%d/%Y %H:%M:%S")}'
                             f' –∑–∞–ø—Ä–æc –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!</b>{newline}'
                             f'<b>ID —Å–∫–∞–Ω–µ—Ä–∞: <u>{formated[0]}{newline}</u></b>'
                             f'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω <b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <u>{formated[1]}</u></b>',
                             reply_markup=main_kb)
        await state.finish()


def register_handler_zkt(dp: Dispatcher):
    dp.register_message_handler(main_zkt, filters.Text(equals='üàØ ZKT'))
    dp.register_message_handler(event_verification, filters.Text(equals='–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏—è'))
    dp.register_message_handler(search_zkt_id, filters.Text(equals='–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ ID'))
    dp.register_message_handler(notice, filters.Text(equals='–û—Ç–º–µ—Ç–∏—Ç—å'))
    dp.register_message_handler(func_inject, state=ClientState.INJECT_MAIN)
