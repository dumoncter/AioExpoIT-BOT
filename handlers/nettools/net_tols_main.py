import ipaddress
from aiogram import types, Dispatcher, filters
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from pythonping import ping
from keyboards import net_tols_main, net_tols_ping, net_tols_ping_info


class ClientState(StatesGroup):
    PING = State()


async def main_nettols(message: types.Message):
    await message.reply("–í—ã–±–µ—Ä–µ—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é:", reply_markup=net_tols_main)


async def icmp_ping(message: types.Message, state: FSMContext):
    await message.reply("–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å <b>ICMP</b>. –£–∫–∞–∂–∏—Ç–µ IP –±–µ–∑ –ø—Ä–∏—Å—Ç–∞–≤–∫–∏ <b>192.168</b>\n"
                        "–ü—Ä–∏–º–µ—Ä: <b>20.1</b>\n"
                        "",
                        reply_markup=net_tols_ping, parse_mode=types.ParseMode.HTML)
    await state.set_state(ClientState.PING)


async def run_ping(message: types.Message, state: FSMContext):
    user_msg = message.text
    reduced = user_msg.split('.')
    line = '-' * 55
    first_ip = '192.168'
    if len(reduced) == 2 and len(reduced[0]) <= 3 and len(reduced[1]) <= 3:
        if reduced[0].isdigit() and reduced[1].isdigit():
            await message.reply("<b>üî• –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è</b>")
            await message.reply(f'<b>–í–∞—à –∞–¥—Ä–µ—Å: {first_ip + "." + reduced[0] + "." + reduced[1]}\n'
                                f'{line}\n'
                                f'{ping(first_ip + "." + reduced[0] + "." + reduced[1], count=5)}</b>',
                                reply_markup=net_tols_ping_info)
            await message.answer(f'‚ö†Ô∏è –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å, <b>—Ç–æ –≤ —ç—Ç–æ–º –æ–∫–Ω–µ —É–∫–∞–∂–∏—Ç–µ <u>–Ω–æ–≤—ã–π ip –∞–¥—Ä–µ—Å.</u>\n</b>'
                                 f'–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ - <b><u>–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</u></b>')
            # await state.finish()
        else:
            await message.reply("‚ùå <b>–ê–¥—Ä–µ—Å —É–∫–∞–∑–∞–Ω –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞</b>")

    elif len(reduced) == 4:
        try:
            ip = ipaddress.ip_address(user_msg)
            await message.reply(f'<b>–í–∞—à –∞–¥—Ä–µ—Å: {first_ip + "." + reduced[0] + "." + reduced[1]}\n'
                                f'{line}\n'
                                f'{ping(user_msg, count=5)}</b>',
                                reply_markup=net_tols_ping_info)
            await message.answer(f'‚ö†Ô∏è –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å, <b>—Ç–æ –≤ —ç—Ç–æ–º –æ–∫–Ω–µ —É–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π ip –∞–¥—Ä–µ—Å.</b>'
                                 f'–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ <b>–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>')
            # await state.finish()
        except ValueError:
            await message.reply("‚ùå <b>–ê–¥—Ä–µ—Å —É–∫–∞–∑–∞–Ω –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞</b>")
    else:
        await message.reply("‚ùå <b>–ê–¥—Ä–µ—Å —É–∫–∞–∑–∞–Ω –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞</b>")


async def extended_ping(message: types.Message):
    await message.reply("–ù–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", reply_markup=net_tols_main)


def register_handler_net_tols(dp: Dispatcher):
    dp.register_message_handler(main_nettols, filters.Text(equals='‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–∏'))
    dp.register_message_handler(icmp_ping, filters.Text(equals='PING'))
    dp.register_message_handler(icmp_ping, filters.Text(equals='–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è'))
    # dp.register_message_handler(run_ping, filters.Text(equals='–ü–æ–≤—Ç–æ—Ä–∏—Ç—å'))
    dp.register_message_handler(run_ping, state=ClientState.PING)